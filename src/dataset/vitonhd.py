# File heavily based on https://github.com/aimagelab/dress-code/blob/main/data/dataset.py

import json
import os
import pickle
import random
import sys
from pathlib import Path
from typing import Tuple, Literal

PROJECT_ROOT = Path(__file__).absolute().parents[2].absolute()
sys.path.insert(0, str(PROJECT_ROOT))

import cv2
import numpy as np
import torch
import torch.utils.data as data
import torchvision.transforms as transforms
from PIL import Image, ImageDraw

from src.utils.posemap import get_coco_body25_mapping
from src.utils.posemap import kpoint_to_heatmap


class VitonHDDataset(data.Dataset):
    def __init__(self,
                 dataroot_path: str,
                 phase: Literal['train', 'test'],
                 radius=5,
                 caption_filename: str = 'vitonhd.json',
                 order: Literal['paired', 'unpaired'] = 'unpaired',
                 outputlist: Tuple[str] = ('im_name', 'garment', 'image', 'shape',
                                           'tryon_image','densepose','category',
                                           'captions','agnostic_mask'),
                 size: Tuple[int, int] = (512, 384),
                 ):

        super(VitonHDDataset, self).__init__()
        self.dataroot = dataroot_path
        self.phase = phase
        self.category = ('upper_body')
        self.outputlist = outputlist
        self.height = size[0]
        self.width = size[1]
        self.radius = radius
        self.transform = transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
        ])
        self.transform2D = transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize((0.5,), (0.5,))
        ])
        self.order = order
        im_names = []
        c_names = []
        dataroot_names = []
        possible_outputs = ['im_name', 'garment', 'image', 'shape',
                            'tryon_image','densepose','category',
                            'captions','agnostic_mask']

        assert all(x in possible_outputs for x in outputlist)

        # Load Captions
        if "captions" in self.outputlist:
            try:
                with open(caption_filename, 'r') as f:
                    self.captions_dict = json.load(f)
            except FileNotFoundError as e:
                print(f"File {caption_filename} not found. NO captions will be loaded.")

        dataroot = self.dataroot
        if phase == 'train':
            filename = os.path.join(dataroot, f"{phase}_pairs.txt")
        else:
            filename = os.path.join(dataroot, f"{phase}_pairs.txt")

        with open(filename, 'r') as f:
            for line in f.readlines():
                if phase == 'train':
                    if order == 'paired':
                        im_name, _ = line.strip().split()
                        c_name = im_name
                    else:
                        im_name, c_name = line.strip().split()
                else:
                    if order == 'paired':
                        im_name, _ = line.strip().split()
                        c_name = im_name
                    else:
                        im_name, c_name = line.strip().split()

                im_names.append(im_name)
                c_names.append(c_name)
                dataroot_names.append(dataroot)

        self.im_names = im_names
        self.c_names = c_names
        self.dataroot_names = dataroot_names


    def __getitem__(self, index):
        c_name = self.c_names[index]
        im_name = self.im_names[index]
        dataroot = self.dataroot_names[index]
        category = 'upper_body'

        if "captions" in self.outputlist:  # Load captions
            captions = self.captions_dict[c_name.split('_')[0]]
            if self.phase == 'train':
                random.shuffle(captions)
            captions = ", ".join(captions)
            captions ='a photo of a model wearing a' + captions  # 

        if "tryon_image" in self.outputlist:   # 
            if self.phase == 'train': # the model  images are generated by the try-on model T1 
                tryon_image = Image.open(os.path.join(dataroot,self.phase ,'tryon-stage1/upper_body', im_name.split('.')[0]+'.png'))
                tryon_image = tryon_image.resize((self.width, self.height))
                tryon_image = self.transform(tryon_image)  # [-1,1]
            else:  #Use real images when testing
                tryon_image = Image.open(os.path.join(dataroot, self.phase, 'image', im_name))
                tryon_image = tryon_image.resize((self.width, self.height))
                tryon_image = self.transform(tryon_image)  # [-1,1]
    
        if "garment" in self.outputlist:  # In-shop garmenting image
            # garmenting image
            garment = Image.open(os.path.join(dataroot, self.phase, 'cloth', c_name))
            garment = garment.resize((self.width, self.height))
            garment = self.transform(garment)  # [-1,1]

        if "image" in self.outputlist :
            # Person image
            image = Image.open(os.path.join(dataroot, self.phase, 'image', im_name))
            image = image.resize((self.width, self.height))
            image = self.transform(image)  # [-1,1]


        if "agnostic_mask" in self.outputlist:
            agnostic_mask = Image.open(os.path.join(dataroot, self.phase, 'agnostic-mask', im_name))
            agnostic_mask = agnostic_mask.resize((self.width, self.height),Image.NEAREST)
            agnostic_mask = transforms.ToTensor()(agnostic_mask) # [-1,1]
            agnostic_mask[agnostic_mask>=0.5]=1
            agnostic_mask[agnostic_mask<0.5]=0
            agnostic_mask=agnostic_mask[0,:,:]
            agnostic_mask=agnostic_mask[None,:,:]
            # masked_image=image*(1-agnostic_mask)


        if "densepose" in self.outputlist:
            uv = Image.open(os.path.join(dataroot, self.phase,'image-densepose', im_name))
            uv=uv.resize((self.width, self.height), Image.NEAREST)
            densepose=self.transform(uv)

        result = {}
        for k in self.outputlist:
            result[k] = vars()[k]

        return result

    def __len__(self):
        return len(self.c_names)
